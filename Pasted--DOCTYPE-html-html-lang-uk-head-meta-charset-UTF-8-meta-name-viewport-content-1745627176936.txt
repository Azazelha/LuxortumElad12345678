<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Luxortum - Демо 3D сцени</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <style>
        body { margin: 0; overflow: hidden; background-color: #1a0a2a; } /* Темний фон, схожий на небо */
        canvas { display: block; }
        #scene-title {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-family: sans-serif;
            z-index: 10;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>
    <div id="scene-title">Luxortum - Демо 3D сцени</div>

    <script>
        // --- Налаштування сцени ---
        const scene = new THREE.Scene();
        // Встановлюємо колір фону сцени, що імітує небо
        scene.background = new THREE.Color(0x4a2a8a); // Пурпуровий відтінок

        // --- Налаштування камери ---
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(0, 5, 15); // Початкова позиція камери

        // --- Налаштування рендерера ---
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);
        document.body.appendChild(renderer.domElement);

        // --- Додаємо керування камерою ---
        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true; // Додає плавності руху
        controls.dampingFactor = 0.25;
        controls.screenSpacePanning = false;
        controls.maxPolarAngle = Math.PI / 2; // Обмежуємо кут нахилу камери

        // --- Створення елементів сцени ---

        // 1. Плаваючий острів (проста площина)
        const islandGeometry = new THREE.PlaneGeometry(20, 20, 10, 10);
        // Можна додати невеликі випадкові зміщення вершин для імітації нерівної поверхні
        const positionAttribute = islandGeometry.attributes.position;
        for (let i = 0; i < positionAttribute.count; i++) {
            const z = positionAttribute.getZ(i);
            positionAttribute.setZ(i, z + (Math.random() - 0.5) * 1.5); // Невелике зміщення по осі Z
        }
        islandGeometry.computeVertexNormals(); // Перераховуємо нормалі після зміни вершин

        const islandMaterial = new THREE.MeshStandardMaterial({ color: 0x32a852, flatShading: true }); // Зелений колір
        const island = new THREE.Mesh(islandGeometry, islandMaterial);
        island.rotation.x = -Math.PI / 2; // Повертаємо площину, щоб вона була горизонтальною
        island.position.y = 0; // Розташовуємо острів

        scene.add(island);

        // 2. Велична споруда (прості куби та циліндри)
        const structureGroup = new THREE.Group(); // Групуємо елементи споруди

        // Основа (куб)
        const baseGeometry = new THREE.BoxGeometry(4, 2, 4);
        const baseMaterial = new THREE.MeshStandardMaterial({ color: 0xcccccc }); // Світлий камінь
        const base = new THREE.Mesh(baseGeometry, baseMaterial);
        base.position.y = 1; // Розташовуємо над островом
        structureGroup.add(base);

        // Вежа (циліндр)
        const towerGeometry = new THREE.CylinderGeometry(1, 1.5, 6, 8); // Верхній радіус, нижній радіус, висота, сегменти
        const towerMaterial = new THREE.MeshStandardMaterial({ color: 0xbbaa88 }); // Золотистий відтінок
        const tower = new THREE.Mesh(towerGeometry, towerMaterial);
        tower.position.y = 3 + 2; // Розташовуємо над основою
        structureGroup.add(tower);

        // Шпиль (конус)
        const spireGeometry = new THREE.ConeGeometry(1, 3, 8);
        const spireMaterial = new THREE.MeshStandardMaterial({ color: 0xffd700, emissive: 0xffd700, emissiveIntensity: 0.5 }); // Золотистий, що світиться
        const spire = new THREE.Mesh(spireGeometry, spireMaterial);
        spire.position.y = 6 + 1.5; // Розташовуємо над вежею
        structureGroup.add(spire);

        structureGroup.position.y = 0.1; // Трохи піднімаємо групу над островом
        scene.add(structureGroup);

        // 3. Світило та промені світла (джерело світла та візуальний ефект)
        // Джерело світла
        const sunLight = new THREE.DirectionalLight(0xffa500, 1); // Помаранчеве світло
        sunLight.position.set(10, 20, 15); // Позиція світила
        sunLight.castShadow = true; // Увімкнути тіні (потребує налаштування рендерера та об'єктів)
        scene.add(sunLight);

        // Додаткове розсіяне світло для загального освітлення
        const ambientLight = new THREE.AmbientLight(0x404040); // М'яке біле світло
        scene.add(ambientLight);

        // Імітація променів світла (дуже спрощено, як візуальний ефект)
        // Це може бути реалізовано складніше за допомогою шейдерів або об'ємного рендерингу
        // Тут використовуємо прості циліндри з прозорістю
        const rayGeometry = new THREE.CylinderGeometry(0.5, 0.1, 30, 4); // Конус, що імітує промінь
        const rayMaterial = new THREE.MeshBasicMaterial({ color: 0xffd700, transparent: true, opacity: 0.2 }); // Золотистий, прозорий
        const lightRay1 = new THREE.Mesh(rayGeometry, rayMaterial);
        lightRay1.position.set(5, 10, 5);
        lightRay1.rotation.z = Math.PI / 4;
        scene.add(lightRay1);

        const lightRay2 = new THREE.Mesh(rayGeometry, rayMaterial);
        rayMaterial.color = new THREE.Color(0xff8c00); // Помаранчевий промінь
        lightRay2.position.set(-5, 12, 8);
        lightRay2.rotation.z = -Math.PI / 6;
         lightRay2.rotation.x = Math.PI / 8;
        scene.add(lightRay2);


        // 4. Фігури, схожі на ангелів (прості сфери, що світяться)
        // Дуже абстрактне представлення
        const angelGeometry = new THREE.SphereGeometry(0.5, 16, 16);
        const angelMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00, emissive: 0xffff00, emissiveIntensity: 1 }); // Жовтий, що світиться

        const angel1 = new THREE.Mesh(angelGeometry, angelMaterial);
        angel1.position.set(8, 8, 0); // Розташовуємо в повітрі
        scene.add(angel1);

        const angel2 = new THREE.Mesh(angelGeometry, angelMaterial);
        angel2.position.set(-7, 9, -5);
        scene.add(angel2);

         const angel3 = new THREE.Mesh(angelGeometry, angelMaterial);
        angel3.position.set(0, 7, 10);
        scene.add(angel3);


        // --- Анімаційний цикл ---
        function animate() {
            requestAnimationFrame(animate);

            // Оновлюємо керування камерою
            controls.update();

            // Можна додати просту анімацію для ангелів (наприклад, легке погойдування)
            angel1.position.y = 8 + Math.sin(Date.now() * 0.001) * 0.5;
            angel2.position.y = 9 + Math.cos(Date.now() * 0.0008) * 0.6;
            angel3.position.y = 7 + Math.sin(Date.now() * 0.0012) * 0.4;


            // Рендеримо сцену
            renderer.render(scene, camera);
        }

        // --- Обробка зміни розміру вікна ---
        window.addEventListener('resize', onWindowResize, false);

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // Запускаємо анімаційний цикл
        animate();

    </script>
</body>
</html>
