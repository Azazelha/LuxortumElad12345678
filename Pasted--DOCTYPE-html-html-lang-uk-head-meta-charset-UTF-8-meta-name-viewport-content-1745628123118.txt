<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Luxortum - Панель Управління Світом</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>

    <style>
        body {
            margin: 0;
            overflow: hidden; /* Приховуємо скролбар, оскільки 3D сцена на весь екран */
            font-family: 'Arial', sans-serif;
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            flex-direction: column;
            gap: 20px;
            position: relative; /* Для позиціонування контейнерів поверх 3D */
        }

        /* Стилі для канвасу Three.js */
        canvas {
             display: block;
             position: fixed; /* Фіксуємо канвас на задньому плані */
             top: 0;
             left: 0;
             z-index: -1; /* Розміщуємо під іншими елементами */
        }

        .container {
            background-color: rgba(74, 42, 138, 0.8); /* Пурпуровий з прозорістю */
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
            max-width: 600px;
            width: 90%;
            box-sizing: border-box;
            position: relative; /* Щоб z-index працював */
            z-index: 1; /* Розміщуємо поверх 3D сцени */
             backdrop-filter: blur(5px); /* Ефект розмиття фону за контейнером */
             -webkit-backdrop-filter: blur(5px); /* Для підтримки Safari */
        }

        h1, h2 {
            color: #ffbb00;
            margin-bottom: 15px;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.3);
            text-align: center;
        }

        .mood-info p {
            font-size: 1.1em;
            margin: 10px 0;
            display: flex;
            justify-content: space-between;
        }

        .mood-info span {
            font-weight: bold;
            color: #ffd700;
        }

         /* --- Візуальні індикатори для настрою та тренду --- */
        .mood-value {
             font-weight: bold;
             transition: color 0.5s ease; /* Анімація зміни кольору тексту */
        }
        .mood-value.ecstatic { color: #ffff00; }
        .mood-value.joyful { color: #00ff00; }
        .mood-value.peaceful { color: #00ffff; }
        .mood-value.neutral { color: #cccccc; }
        .mood-value.anxious { color: #ff8c00; }
        .mood-value.melancholic { color: #8a2be2; }
        .mood-value.sad { color: #0000ff; }
        .mood-value.angry { color: #ff0000; }
        .mood-value.chaotic { color: #ff00ff; }


        .trend-value {
             font-weight: bold;
             transition: color 0.5s ease; /* Анімація зміни кольору тексту */
        }
        .trend-value.improving { color: #00ff00; }
        .trend-value.worsening { color: #ff0000; }
        .trend-value.stable { color: #cccccc; }


        /* --- Візуальний індикатор інтенсивності (проста смужка) --- */
        .intensity-bar-container {
            width: 100%;
            background-color: #6a4a9a;
            border-radius: 5px;
            margin-top: 5px;
            overflow: hidden;
        }
        .intensity-bar {
            height: 15px;
            background-color: #ffd700;
            width: 0%;
            border-radius: 5px;
             transition: width 0.5s ease-in-out; /* Плавний перехід при зміні ширини */
        }


        .effects-list ul {
             list-style: none;
             padding: 0;
             margin-top: 5px;
        }

        .effects-list li {
            background-color: rgba(106, 74, 154, 0.9); /* Темніший пурпуровий з прозорістю */
            padding: 8px;
            margin-bottom: 5px;
            border-radius: 5px;
             display: flex;
             justify-content: space-between;
             font-size: 0.9em;
             opacity: 0; /* Початкова прозорість для анімації появи */
             transform: translateY(10px); /* Початкове зміщення для анімації появи */
             animation: fadeInSlideUp 0.5s ease forwards; /* Анімація появи */
        }

        /* Анімація появи елементів списку ефектів з невеликою затримкою */
        @keyframes fadeInSlideUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Додаємо затримку для кожного елемента списку ефектів за допомогою JavaScript */


        .events-list {
            margin-top: 20px;
            border-top: 1px solid #6a4a9a;
            padding-top: 15px;
            text-align: left;
        }

        .events-list ul {
            list-style: none;
            padding: 0;
        }

        .events-list li {
            background-color: rgba(106, 74, 154, 0.9); /* Темніший пурпуровий з прозорістю */
            padding: 10px;
            margin-bottom: 8px;
            border-radius: 8px;
             font-size: 0.9em;
             opacity: 0; /* Початкова прозорість для анімації появи */
             transform: translateY(10px); /* Початкове зміщення для анімації появи */
             animation: fadeInSlideUp 0.5s ease forwards; /* Анімація появи */
        }
         /* Додаємо затримку для кожного елемента списку подій за допомогою JavaScript */


        /* --- Секція керування настроєм --- */
        .mood-control {
             margin-top: 20px;
             border-top: 1px solid #6a4a9a;
             padding-top: 15px;
             text-align: center;
        }

        .mood-control h2 {
             margin-bottom: 10px;
        }

        .mood-buttons button {
             background-color: #ffbb00;
             color: #1a0a2a;
             border: none;
             padding: 10px 15px;
             margin: 5px;
             border-radius: 5px;
             cursor: pointer;
             font-size: 1em;
             transition: background-color 0.3s ease, transform 0.1s ease; /* Анімація при наведенні та натисканні */
        }

        .mood-buttons button:hover {
             background-color: #ffd700;
             transform: translateY(-2px); /* Невелике підняття при наведенні */
        }

         .mood-buttons button:active {
             background-color: #ccaa00;
             transform: translateY(0); /* Повернення на місце при натисканні */
         }

        /* --- Секція підказок --- */
        .tooltips-section {
             background-color: rgba(74, 42, 138, 0.8); /* Пурпуровий з прозорістю */
             padding: 30px;
             border-radius: 15px;
             box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
             max-width: 600px;
             width: 90%;
             box-sizing: border-box;
             position: relative;
             z-index: 1;
              backdrop-filter: blur(5px);
             -webkit-backdrop-filter: blur(5px);
        }

        .tooltips-list ul {
             list-style: none;
             padding: 0;
        }

        .tooltips-list li {
             background-color: rgba(106, 74, 154, 0.9); /* Темніший пурпуровий з прозорістю */
             padding: 10px;
             margin-bottom: 8px;
             border-radius: 8px;
             font-size: 0.9em;
             opacity: 0; /* Початкова прозорість для анімації появи */
             transform: translateY(10px); /* Початкове зміщення для анімації появи */
             animation: fadeInSlideUp 0.5s ease forwards; /* Анімація появи */
        }
        /* Додаємо затримку для кожного елемента списку підказок за допомогою JavaScript */


        .error-message {
            color: #ff0000;
            font-weight: bold;
            margin-top: 20px;
            text-align: center;
        }

        .loading {
            font-style: italic;
            opacity: 0.7;
            text-align: center;
        }

        /* Стилі для заголовка сцени */
        #scene-title {
            position: fixed; /* Фіксуємо на екрані */
            top: 10px;
            left: 10px;
            color: white;
            font-family: sans-serif;
            z-index: 10; /* Розміщуємо поверх усього */
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>

    <div id="scene-title">Luxortum - Демо 3D сцени</div>

    <div class="container">
        <h1>Панель Управління Настроєм Світу Luxortum</h1>

        <div id="world-mood-info" class="mood-info">
            <p class="loading">Завантаження даних про настрій світу...</p>
             <p>Настрій: <span id="current-mood-value">--</span></p>
             <p>Інтенсивність: <span id="current-intensity-value">--</span></p>
              <div class="intensity-bar-container"><div id="intensity-bar" class="intensity-bar"></div></div>
             <p>Тренд: <span id="current-trend-value">--</span></p>
             <div id="effects-list">
                  <p>Ефекти:</p>
                  <ul>
                       </ul>
             </div>
        </div>

        <div id="world-events-list" class="events-list" style="display: none;">
             <h2>Останні Події</h2>
             <ul>
                 </ul>
        </div>

         <div class="mood-control">
              <h2>Змінити Настрій Світу</h2>
              <div class="mood-buttons">
                   <button data-mood="ecstatic">Екстатичний</button>
                   <button data-mood="joyful">Радісний</button>
                   <button data-mood="peaceful">Мирний</button>
                   <button data-mood="neutral">Нейтральний</button>
                   <button data-mood="anxious">Тривожний</button>
                   <button data-mood="melancholic">Меланхолійний</button>
                   <button data-mood="sad">Сумний</button>
                   <button data-mood="angry">Злий</button>
                   <button data-mood="chaotic">Хаотичний</button>
              </div>
               <p id="update-status" style="color: #ffd700; margin-top: 10px;"></p>
         </div>

         <p class="error-message" id="mood-error-message" style="display: none;"></p>
    </div>

    <div class="tooltips-section container">
         <h2>Контекстні Підказки</h2>
         <div id="tooltips-list" class="tooltips-list">
              <p class="loading">Завантаження підказок...</p>
              <ul>
                   </ul>
         </div>
          <p class="error-message" id="tooltip-error-message" style="display: none;"></p>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const moodInfoDiv = document.getElementById('world-mood-info');
            const eventsListDiv = document.getElementById('world-events-list');
            const eventsListUl = eventsListDiv.querySelector('ul');
            const moodErrorMessageP = document.getElementById('mood-error-message');
            const tooltipsListDiv = document.getElementById('tooltips-list');
            const tooltipsListUl = tooltipsListDiv.querySelector('ul');
            const tooltipErrorMessageP = document.getElementById('tooltip-error-message');
            const moodButtonsDiv = document.querySelector('.mood-buttons');
            const updateStatusP = document.getElementById('update-status');
            const intensityBar = document.getElementById('intensity-bar');
            const effectsListUl = document.querySelector('#effects-list ul');

            // Функція для отримання даних про настрій світу
            async function fetchWorldMood() {
                // Показуємо індикатор завантаження, приховуємо повідомлення про помилку
                const loadingElement = moodInfoDiv.querySelector('.loading');
                if (loadingElement) loadingElement.style.display = 'block';
                moodErrorMessageP.style.display = 'none';
                updateStatusP.textContent = ''; // Очищаємо статус оновлення

                try {
                    const response = await fetch('/api/world-mood');

                    if (!response.ok) {
                        throw new Error(`HTTP помилка! Статус: ${response.status}`);
                    }

                    const moodData = await response.json();

                    displayWorldMood(moodData.data); // Передаємо дані про настрій

                } catch (error) {
                    console.error('Помилка під час отримання настрою світу:', error);
                    displayMoodError('Не вдалося завантажити дані про настрій світу. Спробуйте пізніше.');
                } finally {
                    // Приховуємо індикатор завантаження
                    const loadingElement = moodInfoDiv.querySelector('.loading');
                    if (loadingElement) loadingElement.style.display = 'none';
                }
            }

             // Функція для відправки POST-запиту для зміни настрою світу
            async function updateWorldMood(newMood) {
                updateStatusP.textContent = 'Оновлення...';
                moodErrorMessageP.style.display = 'none';

                try {
                    const response = await fetch('/api/world-mood', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ mood: newMood })
                    });

                    const result = await response.json();

                    if (!response.ok) {
                         throw new Error(result.message || `HTTP помилка! Статус: ${response.status}`);
                    }

                    if (result.status === 'success') {
                        updateStatusP.textContent = 'Настрій оновлено успішно!';
                        // Оновлюємо відображення настрою світу після успішного оновлення
                        displayWorldMood(result.data);
                    } else {
                         throw new Error(result.message || 'Помилка під час оновлення настрою.');
                    }

                } catch (error) {
                    console.error('Помилка під час оновлення настрою світу:', error);
                    updateStatusP.textContent = 'Помилка оновлення!';
                    displayMoodError(`Помилка оновлення настрою: ${error.message}`);
                }
            }

            // Функція для відображення даних про настрій світу на сторінці
            function displayWorldMood(data) {
                moodErrorMessageP.style.display = 'none';

                const currentMoodSpan = document.getElementById('current-mood-value');
                const currentIntensitySpan = document.getElementById('current-intensity-value');
                const currentTrendSpan = document.getElementById('current-trend-value');


                if (data && data.mood !== undefined) {

                    currentMoodSpan.textContent = data.mood;
                    currentIntensitySpan.textContent = `${(data.intensity * 100).toFixed(0)}%`;
                    currentTrendSpan.textContent = data.trend;

                    // --- Візуальні індикатори ---
                    currentMoodSpan.className = 'mood-value ' + data.mood;
                    intensityBar.style.width = `${data.intensity * 100}%`;
                    currentTrendSpan.className = 'trend-value ' + data.trend;

                    // Відображаємо ефекти
                    effectsListUl.innerHTML = '';
                    if (data.effects) {
                         document.getElementById('effects-list').style.display = 'block';
                         // Додаємо ефекти з анімацією та затримкою
                         Object.entries(data.effects).forEach(([key, value], index) => {
                             const formattedValue = value > 0 ? `+${value}` : value;
                             const effectItem = document.createElement('li');
                             effectItem.innerHTML = `<span>${key}:</span> <span>${formattedValue}</span>`;
                             effectsListUl.appendChild(effectItem);
                             // Додаємо затримку для анімації появи
                             effectItem.style.animationDelay = `${index * 0.05}s`;
                         });
                    } else {
                         document.getElementById('effects-list').style.display = 'none';
                    }


                    // Відображаємо останні події
                    eventsListUl.innerHTML = '';
                    if (data.events && data.events.length > 0) {
                        eventsListDiv.style.display = 'block';
                        const recentEvents = data.events.slice(-5).reverse();
                        recentEvents.forEach((event, index) => {
                            const eventTime = new Date(event.timestamp).toLocaleString('uk-UA');
                            const eventItem = document.createElement('li');
                            eventItem.textContent = `${eventTime}: ${event.name} (${event.impact})`;
                            eventsListUl.appendChild(eventItem);
                            // Додаємо затримку для анімації появи
                            eventItem.style.animationDelay = `${index * 0.05}s`;
                        });
                    } else {
                         eventsListDiv.style.display = 'none';
                    }

                } else {
                    displayMoodError('Отримано неповні або невірні дані про настрій світу.');
                }
            }

            // Функція для відображення повідомлень про помилки настрою
            function displayMoodError(message) {
                 updateStatusP.textContent = '';
                 // Можливо, краще оновити статус, а не повністю очищати вміст
                 // moodInfoDiv.innerHTML = '';
                 eventsListDiv.style.display = 'none';
                 moodErrorMessageP.textContent = message;
                 moodErrorMessageP.style.display = 'block';
            }

            // --- Функція для отримання та відображення підказок ---
             async function fetchTooltips() {
                 const loadingElement = tooltipsListDiv.querySelector('.loading');
                 if (loadingElement) loadingElement.style.display = 'block';
                 tooltipErrorMessageP.style.display = 'none';
                 tooltipsListUl.innerHTML = '';


                 try {
                     const response = await fetch('/api/tooltips');

                     if (!response.ok) {
                         throw new Error(`HTTP помилка! Статус: ${response.status}`);
                     }

                     const tooltipsData = await response.json();

                     displayTooltips(tooltipsData);

                 } catch (error) {
                     console.error('Помилка під час отримання підказок:', error);
                     displayTooltipError('Не вдалося завантажити підказки. Спробуйте пізніше.');
                 } finally {
                     const loadingElement = tooltipsListDiv.querySelector('.loading');
                     if (loadingElement) loadingElement.style.display = 'none';
                 }
             }

            // Функція для відображення підказок на сторінці
            function displayTooltips(data) {
                 tooltipErrorMessageP.style.display = 'none';
                 tooltipsListUl.innerHTML = '';

                 if (data && data.length > 0) {
                     // Додаємо підказки з анімацією та затримкою
                     data.forEach((tooltip, index) => {
                         const tooltipItem = document.createElement('li');
                         tooltipItem.textContent = `[${tooltip.character_type}] (${tooltip.context}) ${tooltip.text}`;
                         tooltipsListUl.appendChild(tooltipItem);
                         // Додаємо затримку для анімації появи
                         tooltipItem.style.animationDelay = `${index * 0.05}s`;
                     });
                 } else {
                     const noTooltipsItem = document.createElement('li');
                     noTooltipsItem.textContent = 'Підказки відсутні або не знайдено.';
                     tooltipsListUl.appendChild(noTooltipsItem);
                 }
            }

             // Функція для відображення повідомлень про помилки підказок
            function displayTooltipError(message) {
                 tooltipsListUl.innerHTML = '';
                 const errorItem = document.createElement('li');
                 errorItem.textContent = `Помилка: ${message}`;
                 errorItem.style.color = '#ff0000';
                 tooltipsListUl.appendChild(errorItem);
            }


            // --- Обробники подій ---

            moodButtonsDiv.addEventListener('click', function(event) {
                if (event.target.tagName === 'BUTTON') {
                    const newMood = event.target.getAttribute('data-mood');
                    if (newMood) {
                        updateWorldMood(newMood);
                    }
                }
            });


            // --- Ініціалізація: Завантажуємо дані при завантаженні сторінки ---
            fetchWorldMood();
            fetchTooltips();

            // Оновлюємо дані про настрій світу кожні 30 секунд (опціонально)
            // setInterval(fetchWorldMood, 30000);

            // Оновлюємо підказки кожні 60 секунд (опціонально)
            // setInterval(fetchTooltips, 60000);
        });

        // --- Код Three.js сцени ---
        // Вставляємо код Three.js тут, після закриття DOMContentLoaded
        // щоб канвас був створений після завантаження всіх елементів

        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x1a0a2a); // Темний фон, як у CSS body

        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(0, 5, 15);

        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);
        // Додаємо канвас до body
        document.body.appendChild(renderer.domElement);

        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.25;
        controls.screenSpacePanning = false;
        controls.maxPolarAngle = Math.PI / 2;

        // --- Створення елементів сцени (з попереднього коду Three.js) ---

        // 1. Плаваючий острів (проста площина)
        const islandGeometry = new THREE.PlaneGeometry(20, 20, 10, 10);
        const positionAttribute = islandGeometry.attributes.position;
        for (let i = 0; i < positionAttribute.count; i++) {
            const z = positionAttribute.getZ(i);
            positionAttribute.setZ(i, z + (Math.random() - 0.5) * 1.5);
        }
        islandGeometry.computeVertexNormals();

        const islandMaterial = new THREE.MeshStandardMaterial({ color: 0x32a852, flatShading: true });
        const island = new THREE.Mesh(islandGeometry, islandMaterial);
        island.rotation.x = -Math.PI / 2;
        island.position.y = 0;

        scene.add(island);

        // 2. Велична споруда (прості куби та циліндри)
        const structureGroup = new THREE.Group();

        const baseGeometry = new THREE.BoxGeometry(4, 2, 4);
        const baseMaterial = new THREE.MeshStandardMaterial({ color: 0xcccccc });
        const base = new THREE.Mesh(baseGeometry, baseMaterial);
        base.position.y = 1;
        structureGroup.add(base);

        const towerGeometry = new THREE.CylinderGeometry(1, 1.5, 6, 8);
        const towerMaterial = new THREE.MeshStandardMaterial({ color: 0xbbaa88 });
        const tower = new THREE.Mesh(towerGeometry, towerMaterial);
        tower.position.y = 3 + 2;
        structureGroup.add(tower);

        const spireGeometry = new THREE.ConeGeometry(1, 3, 8);
        const spireMaterial = new THREE.MeshStandardMaterial({ color: 0xffd700, emissive: 0xffd700, emissiveIntensity: 0.5 });
        const spire = new THREE.Mesh(spireGeometry, spireMaterial);
        spire.position.y = 6 + 1.5;
        structureGroup.add(spire);

        structureGroup.position.y = 0.1;
        scene.add(structureGroup);

        // 3. Світило та промені світла (джерело світла та візуальний ефект)
        const sunLight = new THREE.DirectionalLight(0xffa500, 1);
        sunLight.position.set(10, 20, 15);
        sunLight.castShadow = true;
        scene.add(sunLight);

        const ambientLight = new THREE.AmbientLight(0x404040);
        scene.add(ambientLight);

        const rayGeometry = new THREE.CylinderGeometry(0.5, 0.1, 30, 4);
        const rayMaterial = new THREE.MeshBasicMaterial({ color: 0xffd700, transparent: true, opacity: 0.2 });
        const lightRay1 = new THREE.Mesh(rayGeometry, rayMaterial);
        lightRay1.position.set(5, 10, 5);
        lightRay1.rotation.z = Math.PI / 4;
        scene.add(lightRay1);

        const lightRay2 = new THREE.Mesh(rayGeometry, rayMaterial);
        rayMaterial.color = new THREE.Color(0xff8c00);
        lightRay2.position.set(-5, 12, 8);
        lightRay2.rotation.z = -Math.PI / 6;
        lightRay2.rotation.x = Math.PI / 8;
        scene.add(lightRay2);


        // 4. Фігури, схожі на ангелів (прості сфери, що світяться)
        const angelGeometry = new THREE.SphereGeometry(0.5, 16, 16);
        const angelMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00, emissive: 0xffff00, emissiveIntensity: 1 });

        const angel1 = new THREE.Mesh(angelGeometry, angelMaterial);
        angel1.position.set(8, 8, 0);
        scene.add(angel1);

        const angel2 = new THREE.Mesh(angelGeometry, angelMaterial);
        angel2.position.set(-7, 9, -5);
        scene.add(angel2);

        const angel3 = new THREE.Mesh(angelGeometry, angelMaterial);
        angel3.position.set(0, 7, 10);
        scene.add(angel3);


        // --- Анімаційний цикл ---
        function animate() {
            requestAnimationFrame(animate);

            controls.update();

            // Анімація для ангелів
            angel1.position.y = 8 + Math.sin(Date.now() * 0.001) * 0.5;
            angel2.position.y = 9 + Math.cos(Date.now() * 0.0008) * 0.6;
            angel3.position.y = 7 + Math.sin(Date.now() * 0.0012) * 0.4;

            renderer.render(scene, camera);
        }

        // --- Обробка зміни розміру вікна ---
        window.addEventListener('resize', onWindowResize, false);

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // Запускаємо анімаційний цикл
        animate();

    </script>

</body>
</html>
