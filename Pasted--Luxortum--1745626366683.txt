"""
Luxortum - Платформа божественної симуляції
Оптимізований проект для демонстрації ключових функцій
"""
import os
import time
import json # Додаємо імпорт для більш специфічної обробки помилок JSON
from flask import Flask, send_from_directory, jsonify, request, redirect, session # Додаємо імпорт session, хоча в поточному коді вона не використовується, але може знадобитися в майбутньому

app = Flask(__name__)
# app.secret_key = os.environ.get("SESSION_SECRET", "luxortum_secret_key") # Залишаємо, хоча session поки не використовується

# Дані для підказок
# Це статичні дані для демонстрації. У реальному проєкті можуть зберігатися в БД.
TOOLTIPS = [
    {
        "id": 1,
        "character_type": "guide",
        "text": "Дерево Життя є центральною концепцією кабалістичної традиції. Воно представляє структуру всесвіту та шлях до божественного.",
        "element_id": "tree_of_life",
        "context": "kabbalah_symbols"
    },
    {
        "id": 2,
        "character_type": "prophet",
        "text": "Коло Мудрості символізує нескінченну природу божественного знання. Заглибся в себе і знайди свій шлях до просвітлення.",
        "element_id": "wisdom_circle",
        "context": "kabbalah_symbols"
    },
    {
        "id": 3,
        "character_type": "lover",
        "text": "Священне Полум'я — це символ пристрасті до знання й істини. Відчуй жар цього полум'я в своєму серці.",
        "element_id": "sacred_flame",
        "context": "kabbalah_symbols"
    },
    {
        "id": 4,
        "character_type": "creator",
        "text": "Ти творець цього світу. Використовуй свою силу мудро і створюй гармонію в житті своїх творінь.",
        "element_id": "tree_of_life",
        "context": "kabbalah_symbols"
    },
    {
        "id": 5,
        "character_type": "destroyer",
        "text": "Навіть у руйнуванні є порядок і мета. Зі знищення старого народжується щось нове і прекрасне.",
        "element_id": "tree_of_life",
        "context": "kabbalah_symbols"
    }
]

# Дані для настрою світу
# Увага: Використання глобальної змінної для стану WORLD_MOOD
# підходить лише для простої демонстрації або однопотокового середовища.
# Для багатокористувацького додатка (наприклад, з Gunicorn)
# необхідно використовувати базу даних або кеш для синхронізації стану.
WORLD_MOOD = {
    "mood": "peaceful",
    "intensity": 0.6,
    "timestamp": int(time.time() * 1000),
    "events": [
        {
            "name": "Ініціалізація світу",
            "impact": "neutral",
            "timestamp": int(time.time() * 1000)
        }
    ],
    "trend": "stable",
    "effects": {
        "growth": 0.2,
        "creativity": 0.1,
        "harmony": 0.5,
        "chaos": -0.4
    }
}

# Маршрути сервера

@app.route('/')
def index():
    """
    Обслуговує головну сторінку index.html з директорії static.
    Якщо файл не знайдено, повертає просту HTML-сторінку з посиланнями.
    """
    try:
        # Спрощуємо логіку, припускаючи, що index.html завжди в static
        return send_from_directory('static', 'index.html')
    except Exception as e:
        # Більш інформативне повідомлення про помилку, якщо файл не знайдено
        return f"""
        <html>
            <head><title>Luxortum</title></head>
            <body>
                <h1>Вітаємо у Luxortum</h1>
                <p>Платформа божественної симуляції</p>
                <p>Не вдалося знайти index.html в директорії static.</p>
                <p>Будь ласка, переконайтеся, що файл існує за шляхом: /static/index.html</p>
                <p>Технічна інформація про помилку: {str(e)}</p>
                <hr>
                <p>Доступні демо-сторінки:</p>
                <p><a href="/tooltip-demo">Демо контекстних підказок</a></p>
                <p><a href="/world-mood">Демо настрою світу</a></p>
                <p><a href="/creator-avatar">Демо аватара творця</a></p>
                <p><a href="/hello">Тестовий маршрут</a></p>
            </body>
        </html>
        """, 404 # Додаємо статус 404 Not Found

@app.route('/tooltip-demo')
def tooltip_demo():
    """
    Обслуговує сторінку демо підказок.
    Спрощуємо логіку, припускаючи, що файли завжди в static.
    """
    try:
        # Спершу намагаємося віддати нову версію, потім стару
        return send_from_directory('static', 'new-tooltip-demo.html')
    except:
        try:
            return send_from_directory('static', 'tooltip-demo.html')
        except Exception as e:
             return f"""
            <html>
                <head><title>Luxortum - Демо підказок</title></head>
                <body>
                    <h1>Демо контекстних підказок</h1>
                    <p>Не вдалося знайти new-tooltip-demo.html або tooltip-demo.html в директорії static.</p>
                    <p>Будь ласка, переконайтеся, що один з цих файлів існує за шляхом: /static/</p>
                    <p>Технічна інформація про помилку: {str(e)}</p>
                     <p><a href="/">На головну</a></p>
                </body>
            </html>
            """, 404


@app.route('/world-mood')
def world_mood_demo():
    """
    Обслуговує сторінку демо настрою світу.
    Спрощуємо логіку, припускаючи, що файли завжди в static.
    """
    try:
        # Спершу намагаємося віддати нову версію, потім стару
        return send_from_directory('static', 'new-world-mood-demo.html')
    except:
        try:
            return send_from_directory('static', 'world-mood-demo.html')
        except Exception as e:
             return f"""
            <html>
                <head><title>Luxortum - Демо настрою світу</title></head>
                <body>
                    <h1>Демо настрою світу</h1>
                    <p>Не вдалося знайти new-world-mood-demo.html або world-mood-demo.html в директорії static.</p>
                    <p>Будь ласка, переконайтеся, що один з цих файлів існує за шляхом: /static/</p>
                    <p>Технічна інформація про помилку: {str(e)}</p>
                     <p><a href="/">На головну</a></p>
                </body>
            </html>
            """, 404


@app.route('/creator-avatar')
def creator_avatar_demo():
    """
    Обслуговує сторінку демо аватара творця.
    Спрощуємо логіку, припускаючи, що файл завжди в static.
    """
    try:
        return send_from_directory('static', 'creator-avatar-demo.html')
    except Exception as e:
        return f"""
        <html>
            <head><title>Luxortum - Демо аватара творця</title></head>
            <body>
                <h1>Демо аватара творця скоро буде доступно</h1>
                <p>Не вдалося знайти creator-avatar-demo.html в директорії static.</p>
                <p>Будь ласка, переконайтеся, що файл існує за шляхом: /static/creator-avatar-demo.html</p>
                <p>Технічна інформація про помилку: {str(e)}</p>
                 <p><a href="/">На головну</a></p>
            </body>
        </html>
        """, 404


@app.route('/api/tooltips')
def get_tooltips():
    """
    API маршрут для отримання підказок.
    Підтримує фільтрацію за 'context' та 'character_type'.
    """
    context = request.args.get('context', 'all')
    character_type = request.args.get('character_type', None)

    filtered_tooltips = TOOLTIPS

    if context != 'all':
        filtered_tooltips = [tip for tip in filtered_tooltips if tip.get('context') == context] # Використовуємо .get() для безпеки
    
    if character_type:
        filtered_tooltips = [tip for tip in filtered_tooltips if tip.get('character_type') == character_type] # Використовуємо .get() для безпеки

    return jsonify(filtered_tooltips)

@app.route('/api/world-mood', methods=['GET', 'POST'])
def handle_world_mood(): # Змінено назву функції для кращої відповідності GET/POST
    """
    API маршрут для отримання (GET) та оновлення (POST) настрою світу.
    """
    global WORLD_MOOD # Явно вказуємо, що використовуємо глобальну змінну

    if request.method == 'POST':
        try:
            # Отримуємо оновлення від клієнта у форматі JSON
            data = request.get_json() # Використовуємо get_json() для автоматичної обробки JSON

            if data is None: # Перевіряємо, чи дані були успішно отримані як JSON
                 return jsonify({"status": "error", "message": "Невірний формат JSON"}), 400

            # Оновлюємо дані настрою світу, якщо відповідні ключі присутні
            if 'mood' in data and isinstance(data['mood'], str): # Додаємо перевірку типу
                WORLD_MOOD['mood'] = data['mood']

            if 'intensity' in data and isinstance(data['intensity'], (int, float)): # Додаємо перевірку типу
                # Обмежуємо інтенсивність від 0 до 1
                WORLD_MOOD['intensity'] = max(0.0, min(1.0, float(data['intensity'])))

            if 'events' in data and isinstance(data['events'], list):
                # Додаємо нові події, перевіряючи їх структуру
                for event in data['events']:
                    if isinstance(event, dict) and 'name' in event and 'impact' in event:
                        # Перевіряємо, чи impact має допустиме значення
                        valid_impacts = ['positive', 'negative', 'neutral']
                        if event['impact'] in valid_impacts:
                            event['timestamp'] = event.get('timestamp', int(time.time() * 1000))
                            WORLD_MOOD['events'].append(event)
                        else:
                             # Можна додати логування або ігнорувати невірні події
                             print(f"Помилка: Невірне значення impact для події: {event.get('name')}")
                    else:
                        print(f"Помилка: Невірний формат події: {event}")


            # Оновлюємо тренд на основі останніх подій (простий алгоритм)
            # Виносимо логіку розрахунку тренду в окрему функцію для чистоти коду
            WORLD_MOOD['trend'] = calculate_trend(WORLD_MOOD['events'])

            # Оновлюємо ефекти на основі настрою
            # Виносимо логіку розрахунку ефектів в окрему функцію
            WORLD_MOOD['effects'] = calculate_effects(WORLD_MOOD['mood'])

            # Оновлюємо часову мітку останнього оновлення стану світу
            WORLD_MOOD['timestamp'] = int(time.time() * 1000)

            # Повертаємо оновлений стан світу у відповіді
            return jsonify({"status": "success", "data": WORLD_MOOD})

        except json.JSONDecodeError: # Більш специфічна обробка помилки парсингу JSON
             return jsonify({"status": "error", "message": "Невірний формат JSON у тілі запиту"}), 400
        except Exception as e:
            # Загальна обробка інших можливих помилок під час обробки POST-запиту
            return jsonify({"status": "error", "message": f"Внутрішня помилка сервера: {str(e)}"}), 500

    else: # Обробка GET-запиту
        # Отримання поточного настрою світу
        return jsonify(WORLD_MOOD)

# Допоміжні функції для розрахунку тренду та ефектів
def calculate_trend(events):
    """
    Розраховує тренд настрою світу на основі останніх подій.
    """
    if len(events) < 2:
        return 'stable'

    impacts = {'positive': 0, 'negative': 0, 'neutral': 0}

    # Аналізуємо останні 5 подій (або менше, якщо подій менше 5)
    recent_events = events[-5:]
    for event in recent_events:
        # Використовуємо .get() для безпеки, якщо раптом структура події неповна
        impact = event.get('impact')
        if impact in impacts:
            impacts[impact] += 1

    if impacts['positive'] > impacts['negative']:
        return 'improving'
    elif impacts['negative'] > impacts['positive']:
        return 'worsening'
    else:
        return 'stable'

def calculate_effects(mood):
    """
    Розраховує ефекти на основі поточного настрою світу.
    """
    mood_effects = {
        'ecstatic': {'growth': 0.4, 'creativity': 0.5, 'harmony': 0.5, 'chaos': -0.3},
        'joyful': {'growth': 0.3, 'creativity': 0.3, 'harmony': 0.4, 'chaos': -0.2},
        'peaceful': {'growth': 0.2, 'creativity': 0.1, 'harmony': 0.5, 'chaos': -0.4},
        'neutral': {'growth': 0, 'creativity': 0, 'harmony': 0, 'chaos': 0},
        'anxious': {'growth': -0.1, 'creativity': 0.2, 'harmony': -0.2, 'chaos': 0.3},
        'melancholic': {'growth': -0.2, 'creativity': 0.4, 'harmony': -0.1, 'chaos': 0.1},
        'sad': {'growth': -0.3, 'creativity': -0.1, 'harmony': -0.3, 'chaos': 0.2},
        'angry': {'growth': -0.2, 'creativity': -0.3, 'harmony': -0.5, 'chaos': 0.5},
        'chaotic': {'growth': -0.4, 'creativity': 0.1, 'harmony': -0.5, 'chaos': 0.6}
    }
    # Повертаємо ефекти для поточного настрою або пустий словник, якщо настрій невідомий
    return mood_effects.get(mood, {})


@app.route('/health')
def health():
    """
    Простий маршрут для перевірки стану сервера.
    """
    return 'OK'

@app.route('/static/<path:path>')
def serve_static(path):
    """
    Обслуговує статичні файли з піддиректорій static.
    """
    try:
        return send_from_directory('static', path)
    except Exception as e:
        # Обробка помилки, якщо статичний файл не знайдено
        return f"Помилка: Не вдалося знайти статичний файл за шляхом /static/{path}. {str(e)}", 404


# Перенаправлення на нові маршрути для забезпечення сумісності зі старими URL
# Це хороша практика для підтримки старих посилань
@app.route('/tooltip-demo.html')
def redirect_tooltip_demo():
    return redirect('/tooltip-demo')

@app.route('/world-mood-demo.html')
def redirect_world_mood_demo():
    return redirect('/world-mood')

# Додаємо тестовий маршрут для перевірки
@app.route('/hello')
def hello():
    """
    Тестовий маршрут для перевірки роботи сервера.
    """
    return 'Привіт, Luxortum працює!'

if __name__ == '__main__':
    # Отримуємо порт зі змінної оточення PORT або використовуємо 5000 за замовчуванням
    port = int(os.environ.get('PORT', 5000))
    # Запускаємо додаток у режимі налагодження, якщо не використовується Gunicorn
    # У виробничому середовищі цей блок не буде виконуватися при запуску через Gunicorn
    print(f"Запуск Flask додатка на http://0.0.0.0:{port}")
    app.run(host='0.0.0.0', port=port, debug=True) # Додано debug=True для зручності розробки
