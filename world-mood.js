// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ—é —Å–≤—ñ—Ç—É

/**
 * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞—Å—Ç—Ä–æ—é —Å–≤—ñ—Ç—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
 * @param {Object} data - –î–∞–Ω—ñ –ø—Ä–æ –Ω–∞—Å—Ç—Ä—ñ–π —Å–≤—ñ—Ç—É –∑ API
 */
function updateWorldMoodDisplay(data) {
    // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É —Ç–∞ –µ–º–æ–¥–∑—ñ –Ω–∞—Å—Ç—Ä–æ—é
    const moodName = document.getElementById('mood-name');
    const moodEmoji = document.getElementById('mood-emoji');
    
    if (moodName) moodName.textContent = getMoodName(data.mood);
    if (moodEmoji) moodEmoji.textContent = getMoodEmoji(data.mood);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å
    const intensityFill = document.getElementById('intensity-fill');
    if (intensityFill) {
        intensityFill.style.width = `${data.intensity * 100}%`;
        intensityFill.parentElement.className = `intensity-bar ${data.mood}`;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –µ—Ñ–µ–∫—Ç–∏
    for (const [effect, value] of Object.entries(data.effects)) {
        updateEffect(effect, value);
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–¥—ñ—ó
    const eventList = document.getElementById('event-list');
    if (eventList) {
        eventList.innerHTML = '';
        
        data.events.forEach(event => {
            const eventElement = createEventElement(event);
            eventList.appendChild(eventElement);
        });
    }
}

/**
 * –°—Ç–≤–æ—Ä—é—î HTML –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—ñ—ó
 * @param {Object} event - –ü–æ–¥—ñ—è 
 * @returns {HTMLElement} - HTML –µ–ª–µ–º–µ–Ω—Ç –∑ –ø–æ–¥—ñ—î—é
 */
function createEventElement(event) {
    const eventItem = document.createElement('div');
    eventItem.className = 'event-item';
    
    const impactClass = getEventImpact(event.impact);
    
    eventItem.innerHTML = `
        <div class="event-impact ${impactClass}">${event.impact === 'positive' ? '+' : event.impact === 'negative' ? '-' : '='}</div>
        <div class="event-content">
            <div class="event-name">${event.name}</div>
            <div class="event-timestamp">${formatTimestamp(event.timestamp)}</div>
        </div>
    `;
    
    return eventItem;
}

/**
 * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
 * @param {string} effectName - –ù–∞–∑–≤–∞ –µ—Ñ–µ–∫—Ç—É 
 * @param {number} value - –ó–Ω–∞—á–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç—É
 */
function updateEffect(effectName, value) {
    const effectElement = document.getElementById(`effect-${effectName}`);
    if (!effectElement) return;
    
    const effectValue = effectElement.querySelector('.effect-value');
    if (!effectValue) return;
    
    effectValue.textContent = value > 0 ? `+${value.toFixed(1)}` : value.toFixed(1);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª–∞—Å –µ—Ñ–µ–∫—Ç—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω–Ω—è
    let effectClass = 'effect-neutral';
    if (value > 0) {
        effectClass = 'effect-positive';
    } else if (value < 0) {
        effectClass = 'effect-negative';
    }
    
    effectValue.className = `effect-value ${effectClass}`;
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—É –Ω–∞–∑–≤—É –Ω–∞—Å—Ç—Ä–æ—é
 * @param {string} mood - –ö–æ–¥ –Ω–∞—Å—Ç—Ä–æ—é 
 * @returns {string} - –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –Ω–∞–∑–≤–∞
 */
function getMoodName(mood) {
    const moodNames = {
        'ecstatic': '–ï–∫—Å—Ç–∞—Ç–∏—á–Ω–∏–π',
        'joyful': '–†–∞–¥—ñ—Å–Ω–∏–π',
        'peaceful': '–ú–∏—Ä–Ω–∏–π',
        'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π',
        'anxious': '–¢—Ä–∏–≤–æ–∂–Ω–∏–π',
        'melancholic': '–ú–µ–ª–∞–Ω—Ö–æ–ª—ñ–π–Ω–∏–π',
        'sad': '–°—É–º–Ω–∏–π',
        'angry': '–ì–Ω—ñ–≤–Ω–∏–π',
        'chaotic': '–•–∞–æ—Ç–∏—á–Ω–∏–π'
    };
    
    return moodNames[mood] || '–ù–µ–≤—ñ–¥–æ–º–∏–π';
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞—Å—Ç—Ä–æ—é
 * @param {string} mood - –ö–æ–¥ –Ω–∞—Å—Ç—Ä–æ—é 
 * @returns {string} - –ï–º–æ–¥–∑—ñ
 */
function getMoodEmoji(mood) {
    const moodEmojis = {
        'ecstatic': 'üòç',
        'joyful': 'üòä',
        'peaceful': 'üòå',
        'neutral': 'üòê',
        'anxious': 'üòü',
        'melancholic': 'üòî',
        'sad': 'üò¢',
        'angry': 'üò°',
        'chaotic': 'üåÄ'
    };
    
    return moodEmojis[mood] || '‚ùì';
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î CSS –∫–ª–∞—Å –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤–ø–ª–∏–≤—É –ø–æ–¥—ñ—ó
 * @param {string} impact - –í–ø–ª–∏–≤ –ø–æ–¥—ñ—ó (positive, neutral, negative) 
 * @returns {string} - CSS –∫–ª–∞—Å
 */
function getImpactLabel(impact) {
    switch (impact) {
        case 'positive':
            return 'impact-positive';
        case 'negative':
            return 'impact-negative';
        default:
            return 'impact-neutral';
    }
}

/**
 * –§–æ—Ä–º–∞—Ç—É—î —á–∞—Å–æ–≤—É –º—ñ—Ç–∫—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {number} timestamp - Unix timestamp –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} - –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞ —ñ —á–∞—Å
 */
function formatTimestamp(timestamp) {
    const date = new Date(timestamp);
    
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    
    return `${day}.${month}.${year} ${hours}:${minutes}`;
}

/**
 * –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –Ω–∞—Å—Ç—Ä—ñ–π —Å–≤—ñ—Ç—É –∑ API
 */
function fetchWorldMood() {
    fetch('/api/world-mood')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            updateWorldMoodDisplay(data);
        })
        .catch(error => {
            console.error('Error fetching world mood:', error);
        });
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î CSS –∫–ª–∞—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–ø–ª–∏–≤—É –ø–æ–¥—ñ—ó
 * @param {string} mood - –¢–∏–ø –≤–ø–ª–∏–≤—É 
 * @returns {string} - CSS –∫–ª–∞—Å
 */
function getEventImpact(mood) {
    if (mood === 'positive') return 'impact-positive';
    if (mood === 'negative') return 'impact-negative';
    return 'impact-neutral';
}