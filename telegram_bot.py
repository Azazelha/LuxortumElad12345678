"""
Luxortum - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Telegram
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º Telegram
"""

import os
import logging
import json
import sqlite3
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler
from telegram.constants import ParseMode

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
(MAIN_MENU, MOOD_SELECTION, SIMULATION_MENU,
 EVENT_HISTORY, MOOD_HISTORY, SETTINGS) = range(6)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö (—Ç—ñ —Å–∞–º—ñ, —â–æ –π —É ultra_fast.py)
def get_db_connection():
    conn = sqlite3.connect('luxortum_world.db')
    conn.row_factory = sqlite3.Row
    return conn

def get_world_mood():
    conn = get_db_connection()
    try:
        mood_record = conn.execute('SELECT data FROM world_mood WHERE id = 1').fetchone()
        
        if mood_record:
            return json.loads(mood_record['data'])
        else:
            # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω, —è–∫—â–æ –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            initial_mood = get_initial_world_mood()
            save_world_mood(initial_mood)
            return initial_mood
    finally:
        conn.close()

def save_world_mood(mood_data):
    conn = get_db_connection()
    try:
        mood_json = json.dumps(mood_data)
        
        record_exists = conn.execute('SELECT 1 FROM world_mood WHERE id = 1').fetchone() is not None
        
        if record_exists:
            conn.execute('UPDATE world_mood SET data = ? WHERE id = 1', (mood_json,))
        else:
            conn.execute('INSERT INTO world_mood (id, data) VALUES (1, ?)', (mood_json,))
        
        conn.commit()
    finally:
        conn.close()

def get_initial_world_mood():
    return {
        "mood": "neutral",
        "intensity": 0.5,
        "trend": "stable",
        "last_update": datetime.now().timestamp() * 1000,
        "events": [],
        "effects": {
            "happiness": 0,
            "stability": 0,
            "creativity": 0,
            "knowledge": 0,
            "harmony": 0
        }
    }

def save_mood_history(mood, intensity):
    conn = get_db_connection()
    try:
        timestamp = int(datetime.now().timestamp() * 1000)
        conn.execute(
            'INSERT INTO mood_history (mood, intensity, timestamp) VALUES (?, ?, ?)',
            (mood, intensity, timestamp)
        )
        conn.commit()
    finally:
        conn.close()

def get_mood_history(limit=10):
    conn = get_db_connection()
    try:
        cursor = conn.execute(
            'SELECT mood, intensity, timestamp FROM mood_history ORDER BY timestamp DESC LIMIT ?',
            (limit,)
        )
        history = []
        for row in cursor:
            history.append({
                "mood": row['mood'],
                "intensity": row['intensity'],
                "timestamp": row['timestamp']
            })
        return history
    finally:
        conn.close()

def save_world_event(name, impact):
    conn = get_db_connection()
    try:
        timestamp = int(datetime.now().timestamp() * 1000)
        conn.execute(
            'INSERT INTO world_events (name, impact, timestamp) VALUES (?, ?, ?)',
            (name, impact, timestamp)
        )
        conn.commit()
    finally:
        conn.close()

def get_world_events(limit=20):
    conn = get_db_connection()
    try:
        cursor = conn.execute(
            'SELECT name, impact, timestamp FROM world_events ORDER BY timestamp DESC LIMIT ?',
            (limit,)
        )
        events = []
        for row in cursor:
            events.append({
                "name": row['name'],
                "impact": row['impact'],
                "timestamp": row['timestamp']
            })
        return events
    finally:
        conn.close()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
def get_mood_name(mood):
    mood_names = {
        'ecstatic': 'ü§© –ï–∫—Å—Ç–∞—Ç–∏—á–Ω–∏–π',
        'joyful': 'üòä –†–∞–¥—ñ—Å–Ω–∏–π',
        'peaceful': 'üòå –ú–∏—Ä–Ω–∏–π',
        'neutral': 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π',
        'anxious': 'üòü –¢—Ä–∏–≤–æ–∂–Ω–∏–π',
        'melancholic': 'üòî –ú–µ–ª–∞–Ω—Ö–æ–ª—ñ–π–Ω–∏–π',
        'sad': 'üò¢ –°—É–º–Ω–∏–π',
        'angry': 'üò† –ó–ª–∏–π',
        'chaotic': 'üå™Ô∏è –•–∞–æ—Ç–∏—á–Ω–∏–π'
    }
    return mood_names.get(mood, mood)

def get_trend_name(trend):
    trend_names = {
        'ascending': 'üìà –ü–æ–∫—Ä–∞—â—É—î—Ç—å—Å—è',
        'stable': '‚û°Ô∏è –°—Ç–∞–±—ñ–ª—å–Ω–∏–π',
        'descending': 'üìâ –ü–æ–≥—ñ—Ä—à—É—î—Ç—å—Å—è',
        'fluctuating': '‚ÜïÔ∏è –ö–æ–ª–∏–≤–∞—î—Ç—å—Å—è'
    }
    return trend_names.get(trend, trend)

def get_effect_name(effect):
    effect_names = {
        'happiness': '–©–∞—Å—Ç—è',
        'stability': '–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å',
        'creativity': '–¢–≤–æ—Ä—á—ñ—Å—Ç—å',
        'knowledge': '–ó–Ω–∞–Ω–Ω—è',
        'harmony': '–ì–∞—Ä–º–æ–Ω—ñ—è'
    }
    return effect_names.get(effect, effect)

def get_impact_emoji(impact):
    impact_emojis = {
        'positive': '‚úÖ',
        'neutral': '‚ûñ',
        'negative': '‚ùå'
    }
    return impact_emojis.get(impact, '‚ùì')

# –§—É–Ω–∫—Ü—ñ—ó —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞–¥—Å–∏–ª–∞—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–ø—Ü—ñ—è–º–∏"""
    user = update.effective_user
    
    keyboard = [
        [
            InlineKeyboardButton("üåç –°—Ç–∞–Ω —Å–≤—ñ—Ç—É", callback_data="world_state"),
            InlineKeyboardButton("üé≠ –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π", callback_data="change_mood")
        ],
        [
            InlineKeyboardButton("üîÆ –°–∏–º—É–ª—è—Ü—ñ—è", callback_data="simulation"),
            InlineKeyboardButton("üìä –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–¥—ñ–π", callback_data="event_history")
        ],
        [
            InlineKeyboardButton("üìà –Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞—Å—Ç—Ä–æ—é", callback_data="mood_history"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        f"–í—ñ—Ç–∞—é, {user.mention_html()}! –Ø –±–æ—Ç <b>Luxortum</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó.\n\n"
        f"–ß–µ—Ä–µ–∑ –º–µ–Ω–µ –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—î—é —Å–≤—ñ—Ç—É —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –π–æ–≥–æ —Å—Ç–∞–Ω.\n\n"
        f"–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=reply_markup
    )
    
    return MAIN_MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–æ–ø–æ–º–æ–≥–æ—é, –∫–æ–ª–∏ –Ω–∞–¥—Ö–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n"
        "/start - –ü–æ—á–∞—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º\n"
        "/help - –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/state - –î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–≤—ñ—Ç—É\n"
        "/simulate - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∫—Ä–æ–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó\n"
        "/history - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–¥—ñ–π\n"
        "/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é"
    )

async def world_state(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–≤—ñ—Ç—É"""
    query = update.callback_query
    if query:
        await query.answer()
    
    try:
        mood_data = get_world_mood()
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å—Ç–∞–Ω —Å–≤—ñ—Ç—É
        message = "<b>üåç –ü–û–¢–û–ß–ù–ò–ô –°–¢–ê–ù –°–í–Ü–¢–£</b>\n\n"
        message += f"<b>–ù–∞—Å—Ç—Ä—ñ–π:</b> {get_mood_name(mood_data['mood'])}\n"
        message += f"<b>–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å:</b> {int(mood_data['intensity'] * 100)}%\n"
        message += f"<b>–¢—Ä–µ–Ω–¥:</b> {get_trend_name(mood_data['trend'])}\n\n"
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ—Ñ–µ–∫—Ç–∏
        if 'effects' in mood_data and mood_data['effects']:
            message += "<b>–ï–§–ï–ö–¢–ò:</b>\n"
            for effect, value in mood_data['effects'].items():
                modifier = "+" if value > 0 else ""
                message += f"‚Ä¢ {get_effect_name(effect)}: {modifier}{value}\n"
            message += "\n"
        
        # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó (–¥–æ 3)
        if 'events' in mood_data and mood_data['events']:
            message += "<b>–û–°–¢–ê–ù–ù–Ü –ü–û–î–Ü–á:</b>\n"
            recent_events = mood_data['events'][:3]
            for event in recent_events:
                event_time = datetime.fromtimestamp(event['timestamp'] / 1000).strftime('%d.%m %H:%M')
                message += f"‚Ä¢ {get_impact_emoji(event['impact'])} {event_time}: {event['name']}\n"
        
        # –î–æ–¥–∞—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if 'last_update' in mood_data:
            last_update = datetime.fromtimestamp(mood_data['last_update'] / 1000).strftime('%d.%m.%Y %H:%M:%S')
            message += f"\n<i>–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {last_update}</i>"
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –æ–ø—Ü—ñ—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="world_state"),
                InlineKeyboardButton("üé≠ –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π", callback_data="change_mood")
            ],
            [
                InlineKeyboardButton("üîÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é", callback_data="run_simulation"),
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if query:
            await query.edit_message_text(
                message, 
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_html(message, reply_markup=reply_markup)
    
    except Exception as e:
        error_message = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É —Å–≤—ñ—Ç—É: {str(e)}"
        logger.error(error_message)
        
        if query:
            await query.edit_message_text(error_message)
        else:
            await update.message.reply_text(error_message)

async def change_mood(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î –æ–ø—Ü—ñ—ó –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ—é —Å–≤—ñ—Ç—É"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("ü§© –ï–∫—Å—Ç–∞—Ç–∏—á–Ω–∏–π", callback_data="mood_ecstatic"),
            InlineKeyboardButton("üòä –†–∞–¥—ñ—Å–Ω–∏–π", callback_data="mood_joyful"),
            InlineKeyboardButton("üòå –ú–∏—Ä–Ω–∏–π", callback_data="mood_peaceful")
        ],
        [
            InlineKeyboardButton("üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", callback_data="mood_neutral"),
            InlineKeyboardButton("üòü –¢—Ä–∏–≤–æ–∂–Ω–∏–π", callback_data="mood_anxious")
        ],
        [
            InlineKeyboardButton("üòî –ú–µ–ª–∞–Ω—Ö–æ–ª—ñ–π–Ω–∏–π", callback_data="mood_melancholic"),
            InlineKeyboardButton("üò¢ –°—É–º–Ω–∏–π", callback_data="mood_sad")
        ],
        [
            InlineKeyboardButton("üò† –ó–ª–∏–π", callback_data="mood_angry"),
            InlineKeyboardButton("üå™Ô∏è –•–∞–æ—Ç–∏—á–Ω–∏–π", callback_data="mood_chaotic")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —Å–≤—ñ—Ç—É:",
        reply_markup=reply_markup
    )
    
    return MOOD_SELECTION

async def update_mood(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–Ω–æ–≤–ª—é—î –Ω–∞—Å—Ç—Ä—ñ–π —Å–≤—ñ—Ç—É —Ç–∞ –ø–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω"""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π
    data = query.data
    if data.startswith("mood_"):
        selected_mood = data[5:]  # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å "mood_"
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –Ω–∞—Å—Ç—Ä—ñ–π
            current_mood = get_world_mood()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞—Å—Ç—Ä—ñ–π
            current_mood['mood'] = selected_mood
            current_mood['last_update'] = datetime.now().timestamp() * 1000
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π
            save_world_mood(current_mood)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
            save_mood_history(selected_mood, current_mood['intensity'])
            
            await query.edit_message_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä—ñ–π —Å–≤—ñ—Ç—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {get_mood_name(selected_mood)}!\n\n"
                "–ó–∞—á–µ–∫–∞–π—Ç–µ, –æ—Ç—Ä–∏–º—É—é –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ..."
            )
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω —Å–≤—ñ—Ç—É
            await world_state(update, context)
            
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–∞—Å—Ç—Ä–æ—é —Å–≤—ñ—Ç—É: {str(e)}\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
    
    return MAIN_MENU

async def simulation_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Å–∏–º—É–ª—è—Ü—ñ—ó"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üîÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–¥–∏–Ω –∫—Ä–æ–∫", callback_data="run_simulation")
        ],
        [
            InlineKeyboardButton("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ 5 –∫—Ä–æ–∫—ñ–≤", callback_data="run_multi_simulation")
        ],
        [
            InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", callback_data="simulation_results")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="<b>üîÆ –ú–ï–ù–Æ –°–ò–ú–£–õ–Ø–¶–Ü–á</b>\n\n"
             "–û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é —Å–∏–º—É–ª—è—Ü—ñ—ó, —è–∫—É –±–∞–∂–∞—î—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏.\n\n"
             "<i>–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó –≥–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø–æ–¥—ñ—ó —Ç–∞ –∑–º—ñ–Ω—é—î —Å—Ç–∞–Ω —Å–≤—ñ—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —ó—Ö –≤–ø–ª–∏–≤—É.</i>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    return SIMULATION_MENU

async def run_simulation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞—î –æ–¥–∏–Ω –∫—Ä–æ–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text("‚è≥ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó...")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —Å–≤—ñ—Ç—É
        current_mood_data = get_world_mood()
        
        # –Ü–º—ñ—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø–æ–¥—ñ—ó (—è–∫ —É ultra_fast.py)
        import random
        
        event = {
            "name": f"–ü–æ–¥—ñ—è #{random.randint(1000, 9999)}",
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥—ñ—è —á–µ—Ä–µ–∑ Telegram",
            "impact": random.choice(["positive", "neutral", "negative"]),
            "intensity": random.uniform(0.1, 0.5),
            "timestamp": datetime.now().timestamp() * 1000
        }
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–ø–ª–∏–≤ –ø–æ–¥—ñ—ó –Ω–∞ –Ω–∞—Å—Ç—Ä—ñ–π —Å–≤—ñ—Ç—É
        if event["impact"] == "positive":
            # –ü–æ–∑–∏—Ç–∏–≤–Ω–∞ –ø–æ–¥—ñ—è –ø–æ–∫—Ä–∞—â—É—î –Ω–∞—Å—Ç—Ä—ñ–π
            mood_levels = ["sad", "melancholic", "anxious", "neutral", 
                        "peaceful", "joyful", "ecstatic"]
            current_index = mood_levels.index(current_mood_data["mood"]) \
                            if current_mood_data["mood"] in mood_levels else 3  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π
            
            new_index = min(current_index + 1, len(mood_levels) - 1)
            current_mood_data["mood"] = mood_levels[new_index]
            current_mood_data["intensity"] = min(current_mood_data["intensity"] + event["intensity"] * 0.2, 1.0)
            current_mood_data["trend"] = "ascending"
        
        elif event["impact"] == "negative":
            # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞ –ø–æ–¥—ñ—è –ø–æ–≥—ñ—Ä—à—É—î –Ω–∞—Å—Ç—Ä—ñ–π
            mood_levels = ["chaotic", "angry", "sad", "melancholic", "anxious", 
                        "neutral", "peaceful", "joyful", "ecstatic"]
            current_index = mood_levels.index(current_mood_data["mood"]) \
                            if current_mood_data["mood"] in mood_levels else 5  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π
            
            new_index = max(current_index - 1, 0)
            current_mood_data["mood"] = mood_levels[new_index]
            current_mood_data["intensity"] = min(current_mood_data["intensity"] + event["intensity"] * 0.2, 1.0)
            current_mood_data["trend"] = "descending"
        
        else:  # neutral impact
            # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞ –ø–æ–¥—ñ—è –º–æ–∂–µ —Ç—Ä–æ—Ö–∏ –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å, –∞–ª–µ –Ω–µ –Ω–∞—Å—Ç—Ä—ñ–π
            intensity_change = event["intensity"] * 0.1 * (1 if random.random() > 0.5 else -1)
            current_mood_data["intensity"] = max(0.1, min(current_mood_data["intensity"] + intensity_change, 1.0))
            current_mood_data["trend"] = "stable"
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó
        if "events" not in current_mood_data:
            current_mood_data["events"] = []
        
        current_mood_data["events"].insert(0, {
            "name": event["name"],
            "impact": event["impact"],
            "timestamp": event["timestamp"]
        })
        
        # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–¥—ñ–π —É —Å–ø–∏—Å–∫—É
        current_mood_data["events"] = current_mood_data["events"][:20]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        current_mood_data["last_update"] = datetime.now().timestamp() * 1000
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π
        save_world_mood(current_mood_data)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–¥—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        save_world_event(event["name"], event["impact"])
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω—É –Ω–∞—Å—Ç—Ä–æ—é –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        save_mood_history(current_mood_data["mood"], current_mood_data["intensity"])
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_message = "<b>‚úÖ –ö–†–û–ö –°–ò–ú–£–õ–Ø–¶–Ü–á –í–ò–ö–û–ù–ê–ù–û</b>\n\n"
        result_message += f"<b>–ü–æ–¥—ñ—è:</b> {event['name']}\n"
        result_message += f"<b>–û–ø–∏—Å:</b> {event['description']}\n"
        result_message += f"<b>–í–ø–ª–∏–≤:</b> {get_impact_emoji(event['impact'])} {event['impact']}\n"
        result_message += f"<b>–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å:</b> {int(event['intensity'] * 100)}%\n\n"
        
        result_message += "<b>–ù–û–í–ò–ô –°–¢–ê–ù –°–í–Ü–¢–£:</b>\n"
        result_message += f"<b>–ù–∞—Å—Ç—Ä—ñ–π:</b> {get_mood_name(current_mood_data['mood'])}\n"
        result_message += f"<b>–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å:</b> {int(current_mood_data['intensity'] * 100)}%\n"
        result_message += f"<b>–¢—Ä–µ–Ω–¥:</b> {get_trend_name(current_mood_data['trend'])}\n"
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –æ–ø—Ü—ñ—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üîÆ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data="run_simulation")
            ],
            [
                InlineKeyboardButton("üåç –°—Ç–∞–Ω —Å–≤—ñ—Ç—É", callback_data="world_state"),
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="simulation")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó: {str(e)}\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏."
        )
    
    return SIMULATION_MENU

async def run_multi_simulation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞—î –∫—ñ–ª—å–∫–∞ –∫—Ä–æ–∫—ñ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó"""
    query = update.callback_query
    await query.answer()
    
    steps = 5  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    await query.edit_message_text(f"‚è≥ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó ({steps} –∫—Ä–æ–∫—ñ–≤)...")
    
    try:
        events_generated = []
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ —Å–∏–º—É–ª—è—Ü—ñ—ó
        for i in range(steps):
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —Å–≤—ñ—Ç—É
            current_mood_data = get_world_mood()
            
            # –Ü–º—ñ—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø–æ–¥—ñ—ó
            import random
            
            event = {
                "name": f"–ü–æ–¥—ñ—è #{random.randint(1000, 9999)}",
                "description": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥—ñ—è —á–µ—Ä–µ–∑ Telegram (–∫—Ä–æ–∫ {i+1}/{steps})",
                "impact": random.choice(["positive", "neutral", "negative"]),
                "intensity": random.uniform(0.1, 0.5),
                "timestamp": datetime.now().timestamp() * 1000
            }
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –∑–≤—ñ—Ç—É
            events_generated.append(event)
            
            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–ø–ª–∏–≤ –ø–æ–¥—ñ—ó –Ω–∞ –Ω–∞—Å—Ç—Ä—ñ–π —Å–≤—ñ—Ç—É (—Ç–æ–π —Å–∞–º–∏–π –∫–æ–¥, —â–æ —ñ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É)
            if event["impact"] == "positive":
                # –ü–æ–∑–∏—Ç–∏–≤–Ω–∞ –ø–æ–¥—ñ—è –ø–æ–∫—Ä–∞—â—É—î –Ω–∞—Å—Ç—Ä—ñ–π
                mood_levels = ["sad", "melancholic", "anxious", "neutral", 
                            "peaceful", "joyful", "ecstatic"]
                current_index = mood_levels.index(current_mood_data["mood"]) \
                                if current_mood_data["mood"] in mood_levels else 3  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π
                
                new_index = min(current_index + 1, len(mood_levels) - 1)
                current_mood_data["mood"] = mood_levels[new_index]
                current_mood_data["intensity"] = min(current_mood_data["intensity"] + event["intensity"] * 0.2, 1.0)
                current_mood_data["trend"] = "ascending"
            
            elif event["impact"] == "negative":
                # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞ –ø–æ–¥—ñ—è –ø–æ–≥—ñ—Ä—à—É—î –Ω–∞—Å—Ç—Ä—ñ–π
                mood_levels = ["chaotic", "angry", "sad", "melancholic", "anxious", 
                            "neutral", "peaceful", "joyful", "ecstatic"]
                current_index = mood_levels.index(current_mood_data["mood"]) \
                                if current_mood_data["mood"] in mood_levels else 5  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π
                
                new_index = max(current_index - 1, 0)
                current_mood_data["mood"] = mood_levels[new_index]
                current_mood_data["intensity"] = min(current_mood_data["intensity"] + event["intensity"] * 0.2, 1.0)
                current_mood_data["trend"] = "descending"
            
            else:  # neutral impact
                # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞ –ø–æ–¥—ñ—è –º–æ–∂–µ —Ç—Ä–æ—Ö–∏ –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å, –∞–ª–µ –Ω–µ –Ω–∞—Å—Ç—Ä—ñ–π
                intensity_change = event["intensity"] * 0.1 * (1 if random.random() > 0.5 else -1)
                current_mood_data["intensity"] = max(0.1, min(current_mood_data["intensity"] + intensity_change, 1.0))
                current_mood_data["trend"] = "stable"
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó
            if "events" not in current_mood_data:
                current_mood_data["events"] = []
            
            current_mood_data["events"].insert(0, {
                "name": event["name"],
                "impact": event["impact"],
                "timestamp": event["timestamp"]
            })
            
            # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–¥—ñ–π —É —Å–ø–∏—Å–∫—É
            current_mood_data["events"] = current_mood_data["events"][:20]
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            current_mood_data["last_update"] = datetime.now().timestamp() * 1000
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π
            save_world_mood(current_mood_data)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–¥—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            save_world_event(event["name"], event["impact"])
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω—É –Ω–∞—Å—Ç—Ä–æ—é –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            save_mood_history(current_mood_data["mood"], current_mood_data["intensity"])
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_message = f"<b>‚úÖ –í–ò–ö–û–ù–ê–ù–û {steps} –ö–†–û–ö–Ü–í –°–ò–ú–£–õ–Ø–¶–Ü–á</b>\n\n"
        
        result_message += "<b>–ó–ì–ï–ù–ï–†–û–í–ê–ù–Ü –ü–û–î–Ü–á:</b>\n"
        for idx, event in enumerate(events_generated[:3]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 –ø–æ–¥—ñ—ó
            result_message += f"{idx+1}. {get_impact_emoji(event['impact'])} {event['name']}\n"
        
        if len(events_generated) > 3:
            result_message += f"... —Ç–∞ —â–µ {len(events_generated) - 3} –ø–æ–¥—ñ–π\n"
        
        result_message += "\n<b>–ù–û–í–ò–ô –°–¢–ê–ù –°–í–Ü–¢–£:</b>\n"
        result_message += f"<b>–ù–∞—Å—Ç—Ä—ñ–π:</b> {get_mood_name(current_mood_data['mood'])}\n"
        result_message += f"<b>–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å:</b> {int(current_mood_data['intensity'] * 100)}%\n"
        result_message += f"<b>–¢—Ä–µ–Ω–¥:</b> {get_trend_name(current_mood_data['trend'])}\n"
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –æ–ø—Ü—ñ—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data="run_multi_simulation")
            ],
            [
                InlineKeyboardButton("üåç –°—Ç–∞–Ω —Å–≤—ñ—Ç—É", callback_data="world_state"),
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="simulation")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó: {str(e)}\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏."
        )
    
    return SIMULATION_MENU

async def event_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–¥—ñ–π"""
    query = update.callback_query
    await query.answer()
    
    try:
        events = get_world_events(10)  # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–¥—ñ–π
        
        if events:
            message = "<b>üìä –Ü–°–¢–û–†–Ü–Ø –ü–û–î–Ü–ô</b>\n\n"
            
            for idx, event in enumerate(events):
                event_time = datetime.fromtimestamp(event['timestamp'] / 1000).strftime('%d.%m %H:%M:%S')
                impact_emoji = get_impact_emoji(event['impact'])
                message += f"{idx+1}. {impact_emoji} <b>{event_time}</b> - {event['name']}\n"
        else:
            message = "üìä –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–¥—ñ–π –ø–æ—Ä–æ–∂–Ω—è."
        
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="event_history")
            ],
            [
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–¥—ñ–π: {str(e)}\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏."
        )
    
    return EVENT_HISTORY

async def mood_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω –Ω–∞—Å—Ç—Ä–æ—é"""
    query = update.callback_query
    await query.answer()
    
    try:
        history = get_mood_history(10)  # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó
        
        if history:
            message = "<b>üìà –Ü–°–¢–û–†–Ü–Ø –ó–ú–Ü–ù –ù–ê–°–¢–†–û–Æ</b>\n\n"
            
            for idx, record in enumerate(history):
                history_time = datetime.fromtimestamp(record['timestamp'] / 1000).strftime('%d.%m %H:%M:%S')
                mood_name = get_mood_name(record['mood'])
                intensity = int(record['intensity'] * 100)
                message += f"{idx+1}. <b>{history_time}</b> - {mood_name} ({intensity}%)\n"
        else:
            message = "üìà –Ü—Å—Ç–æ—Ä—ñ—è –∑–º—ñ–Ω –Ω–∞—Å—Ç—Ä–æ—é –ø–æ—Ä–æ–∂–Ω—è."
        
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="mood_history")
            ],
            [
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–∞—Å—Ç—Ä–æ—é: {str(e)}\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏."
        )
    
    return MOOD_HISTORY

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    message = "<b>‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø</b>\n\n"
    message += "–¢—É—Ç –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –±–æ—Ç–∞."
    
    keyboard = [
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    return SETTINGS

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üåç –°—Ç–∞–Ω —Å–≤—ñ—Ç—É", callback_data="world_state"),
            InlineKeyboardButton("üé≠ –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π", callback_data="change_mood")
        ],
        [
            InlineKeyboardButton("üîÆ –°–∏–º—É–ª—è—Ü—ñ—è", callback_data="simulation"),
            InlineKeyboardButton("üìä –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–¥—ñ–π", callback_data="event_history")
        ],
        [
            InlineKeyboardButton("üìà –Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞—Å—Ç—Ä–æ—é", callback_data="mood_history"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é Luxortum. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=reply_markup
    )
    
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–∑–º–æ–≤—É"""
    user = update.message.from_user
    logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s —Å–∫–∞—Å—É–≤–∞–≤ —Ä–æ–∑–º–æ–≤—É.", user.first_name)
    
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start"
    )
    
    return ConversationHandler.END

async def state_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /state"""
    await world_state(update, context)

async def simulate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /simulate"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–∫—Ç–∏–≤–Ω–∏–π callback_query –¥–ª—è run_simulation
    class MockQuery:
        async def answer(self):
            pass
        
        async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    
    update.callback_query = MockQuery()
    await run_simulation(update, context)

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /history"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–∫—Ç–∏–≤–Ω–∏–π callback_query –¥–ª—è event_history
    class MockQuery:
        async def answer(self):
            pass
        
        async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    
    update.callback_query = MockQuery()
    await event_history(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –±–∞–∑–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("state", state_command))
    application.add_handler(CommandHandler("simulate", simulate_command))
    application.add_handler(CommandHandler("history", history_command))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è ConversationHandler –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(world_state, pattern="^world_state$"),
                CallbackQueryHandler(change_mood, pattern="^change_mood$"),
                CallbackQueryHandler(simulation_menu, pattern="^simulation$"),
                CallbackQueryHandler(event_history, pattern="^event_history$"),
                CallbackQueryHandler(mood_history, pattern="^mood_history$"),
                CallbackQueryHandler(settings, pattern="^settings$"),
                CallbackQueryHandler(run_simulation, pattern="^run_simulation$")
            ],
            MOOD_SELECTION: [
                CallbackQueryHandler(update_mood, pattern="^mood_"),
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
            ],
            SIMULATION_MENU: [
                CallbackQueryHandler(run_simulation, pattern="^run_simulation$"),
                CallbackQueryHandler(run_multi_simulation, pattern="^run_multi_simulation$"),
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"),
                CallbackQueryHandler(simulation_menu, pattern="^simulation$")
            ],
            EVENT_HISTORY: [
                CallbackQueryHandler(event_history, pattern="^event_history$"),
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
            ],
            MOOD_HISTORY: [
                CallbackQueryHandler(mood_history, pattern="^mood_history$"),
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
            ],
            SETTINGS: [
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()